{% extends 'base-client.html.twig' %}

{% block title %}Paciente{% endblock %}

{% block body %}
    <div class="container-fluid">
        <div class="app-calendar overflow-hidden border">
            <div class="row no-gutters">
                <!-- Sidebar -->
                <div class="col app-calendar-sidebar flex-grow-0 overflow-hidden d-none flex-column"
                     id="app-calendar-sidebar">
                    <div class="">

                        <div class="d-flex justify-content-center" id="nav-calendar">
                            <label for="quickDateSelect" class="form-label d-none"></label>
                            <input type="text" class="form-control col-12 d-none " name="quickDateSelect" id="quickDateSelect">
                        </div>

                        <div class="card-body pb-0">
                            <form id="filter_form"></form>
                            <div class="calendar-events-filter">
                                <input id="date_from" form="filter_form" type="hidden" class="date_range" name="{{ filterService.filterField('date_from') }}">
                                <input id="date_to" form="filter_form" type="hidden" class="date_range" name="{{ filterService.filterField('date_to') }}">
                            </div>
                        </div>
                    </div>
                    <div class="mt-auto">
                        <img
                                src="{{ asset('assets/app-assets/images/pages/calendar-illustration.png') }}"
                                alt=""
                                class="img-fluid"
                        />
                    </div>
                </div>
                <!-- Calendar -->
                <div class="col position-relative">
                    <div class="card shadow-none border-0 mb-0 rounded-0">
                        <div class="card-body pb-0">
                            <div id="calendar"></div>
                        </div>
                    </div>
                </div>
                <!-- /Calendar -->
                <div class="body-content-overlay"></div>
            </div>
        </div>

    </div>

{% endblock %}

{% block stylesheets %}

    <link rel="stylesheet" type="text/css"
          href="{{ asset('assets/css/vendors/calendar/fullcalendar2.min.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/css/vendors/calendar/app-calendar.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/css/vendors/jquery.contextMenu.min.css') }}">
    <style>
        .fc-more-popover {
            max-height: 65%;
            overflow-y: auto;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('assets/js/calendar/fullcalendar2.min.js') }}"></script>
    <script src="{{ asset('assets/js/moment.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery.contextMenu.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery-ui/jquery.ui.position.min.js') }}"></script>
    <script src="{{ asset('assets/js/lockr/lockr.js') }}"></script>

    <script>
        let calendar = null;
        let calendarDate = null;

        const filterForm = document.getElementById('filter_form');

        const EVENT_CALENDAR_KEY_DATES = "{{ configuration.app_name|replace({' ': "_" }) }}_calendar_dates";
        const EVENT_CALENDAR_VIEW = "{{ configuration.app_name|replace({' ': "_" }) }}_calendar_view";

        function focusSpecificDate(date){
            calendar.gotoDate(date);
        }

        function changeOrder(eventOrder){
            if(!eventOrder){
                eventOrder = 'start';
            }
            calendar.setOption('eventOrder', eventOrder);
        }

        function updateDates()
        {
            if(calendar){
                let dateFrom = calendar.getDate();
                setCalendarSavedDates(
                    moment(dateFrom).startOf('month').format('DD-MM-YYYY'),
                    moment(dateFrom).clone().endOf('month').format('DD-MM-YYYY')
                );
            }
        }

        const getCalendarSavedDates = () => {
            let selectedDates = Lockr.get(EVENT_CALENDAR_KEY_DATES);
            let dateFrom = moment().clone().startOf('month').format('DD-MM-YYYY');
            let dateTo = moment().clone().endOf('month').format('DD-MM-YYYY');
            let expire = moment().clone().endOf('year').toString();
            document.cookie = "{{ configuration.app_name|replace({' ': "_" }) }}_date_from=" + dateFrom + "; expires="+expire;
            document.cookie = "{{ configuration.app_name|replace({' ': "_" }) }}_date_to=" + dateTo + "; expires="+expire;
            if(typeof selectedDates !== "undefined") {
                return selectedDates;
            } else {
                Lockr.set(EVENT_CALENDAR_KEY_DATES, {
                    dateFrom: moment().clone().startOf('month').format('DD-MM-YYYY'),
                    dateTo: moment().clone().endOf('month').format('DD-MM-YYYY'),
                });
                return Lockr.get(EVENT_CALENDAR_KEY_DATES);
            }
        }


        const setCalendarSavedDates = (dateFrom, dateTo) => {
            $('#date_from').val(dateFrom);
            $('#date_to').val(dateTo);
            Lockr.set(EVENT_CALENDAR_KEY_DATES, {
                dateFrom,
                dateTo
            });
        }

        const setCalendarView = (view) => {
            Lockr.set(EVENT_CALENDAR_VIEW, view);
        }

        const getCalendarView = () => {
            let calendarView = Lockr.get(EVENT_CALENDAR_VIEW);
            if(typeof  calendarView !== 'undefined')
                return calendarView;
            else
                return 'dayGridMonth';
        }


        const getEventsFromFilter = (info, successCallback, failureCallback) => {
            if(typeof info !== "undefined") {
                setCalendarSavedDates(
                    moment(info.start).format('DD-MM-YYYY'),
                    moment(info.end).format('DD-MM-YYYY')
                );
            }
            let formData = $(filterForm).serialize();
            getEvents(formData).then(appointments => {
                if(typeof successCallback !== "undefined") {
                    successCallback(appointments);
                }
            });
        }

        const getEvents = (formData) => {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '{{ path('app_client_appointment_json') }}',
                    type: 'get',
                    data: formData,
                    success: (response) => {
                        if(response.success) {
                            resolve(response.data);
                        } else {

                        }
                    },
                    error: (err) => {

                    }
                });
            });
        }


        const detectCalendarChangedDate = () => {

            let date = calendar.getDate();
            let dateFrom = moment(date).clone().startOf('month').format('DD-MM-YYYY');
            let dateTo = moment(date).clone().endOf('month').format('DD-MM-YYYY');
            setCalendarSavedDates(dateFrom, dateTo);
        }

        // detect change on any field for submit filter form
        $(function () {

            $('.select2').select2();
            $('.select2').on('change.select2', function () {
                calendar.refetchEvents()
            });
            $('#resetFilters').on('click', function () {
                window.location.href = "{{ path('appointment_index') }}";
            })
            $('.type-filter').change(function () {
                calendar.refetchEvents()
            });
            $('.title-filter').change(function () {
                calendar.refetchEvents()
            });

        });

        $(document).on('click', '.fc-sidebarToggle-button', function (e) {
            $('.app-calendar-sidebar, .body-content-overlay').addClass('show');

        });

        $(document).on('click', '.body-content-overlay', function (e) {
            $('.app-calendar-sidebar, .body-content-overlay').removeClass('show');
        });


        document.addEventListener('DOMContentLoaded', function () {
            let calendarEl = document.getElementById('calendar'),
                toggleSidebarBtn = $('.btn-toggle-sidebar')
            ;

            // Event click function
            function eventClick(info) {
                let eventToUpdate = info.event;
                let appointmentId = eventToUpdate.extendedProps.id;
                window.location.href = "{{ path('appointment_show') }}/" + appointmentId;
            }

            // Modify sidebar toggler
            function modifyToggler() {
                $('.fc-sidebarToggle-button')
                    .empty()
                    .append(feather.icons['filter'].toSvg({class: 'ficon'}));
            }

            // Calendar plugins
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: getCalendarView(),
                schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
                buttonText: {
                    'day': '{{ 'Day'|trans }}',
                    'month': '{{ 'Month'|trans }}',
                    'list': '{{ 'Listing'|trans }}',
                    'week': '{{ 'Week'|trans }}'
                },
                editable: false,
                locale: locale,
                slotDuration: '{% if app.user.calendarInterval %}{{ app.user.calendarInterval|date('H:i:s') }}{% elseif configuration.calendar_interval %}{{ configuration.calendar_interval|date('H:i:s') }}{% else %}00:15:00{% endif %}',
                timeZone: 'local',
                firstDay: 1,
                eventResizableFromStart: true,
                eventColor: 'red',
                customButtons: {
                    sidebarToggle: {
                        text: 'Sidebar'
                    }
                },
                headerToolbar: {
                    start: 'sidebarToggle, prev,next, title',
                    end: 'dayGridMonth,timeGridWeek, timeGridDay,listMonth'
                },
                initialDate: moment(getCalendarSavedDates().dateFrom, 'DD-MM-YYYY').format('YYYY-MM-DD'),
                eventTimeFormat: { // like '14:30:00'
                    hour: '2-digit',
                    minute: '2-digit'
                },
                resources: [

                ],
                views: {
                    dayGridMonth: {
                        dayMaxEventRows: 5,
                        moreLinkContent: function (object) {
                            const {num} = object;
                            return num+" {{ 'Appointments More'|trans }}";


                        },
                    }
                },
                navLinks: true, // can click day/week names to navigate views
                events: getEventsFromFilter,
                eventDidMount: function(event) { //Run when events are rendered
                    //info.el.attr = info.el.className + " context-menu-one"

                    event.el.setAttribute('data-id', event.event._def.extendedProps.id);
                    event.el.style.borderColor = event.event._def.extendedProps.borderColor;
                    event.el.style.backgroundColor = event.event._def.extendedProps.backgroundColor;
                },
                eventClassNames: function ({event: calendarEvent}) {
                    //const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];

                    return [
                        'eventCalendar'
                    ]
                },

                eventClick: function (info) {
                    eventClick(info);

                },
                dateClick: function(info) {
                    let date = moment(info.dateStr);
                    $('#appointmentDateModal').val(date.format('YYYY-MM-DD'));
                    $('#servicesModal option').remove();

                    calendarDate = date;


                    {% if userPermission.can('create', 'appointments') %}
                    changeClientCreateModal()
                    $('#redirectToCreateModal').modal('show');
                    {% endif %}
                    //window.location.href = "{{ path('appointment_new') }}?referer={{ app.request.getUri() }}&appointment_date="+date.format('DD-MM-YYYY');
                },
                datesSet: function () {
                    modifyToggler();
                },
                viewClassNames: function (e) {
                    setCalendarView(e.view.type);
                },
                viewDidMount: (view) => {

                    /*
                    $('.fc-next-button').click(function(){
                        let date = calendar.getDate();
                        let dateFrom = moment(date).clone().startOf('month').format('YYYY-MM-DD HH:mm:ss');
                        let dateTo = moment(date).clone().endOf('month').format('YYYY-MM-DD HH:mm:ss');
                        setCalendarSavedDates(dateFrom, dateTo);
                        console.log("llega")
                        return false;
                    });
                    */

                },
            });
            // Render calendar
            calendar.render();
            // Modify sidebar toggler
            modifyToggler();

            // Sidebar Toggle Btn
            if (toggleSidebarBtn.length) {
                toggleSidebarBtn.on('click', function () {
                    cancelBtn.removeClass('d-none');
                });
            }

        });



    </script>

{% endblock %}
