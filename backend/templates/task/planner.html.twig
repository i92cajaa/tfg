{% extends 'base-admin.html.twig' %}

{% block title %}
    {{ 'Planner'|trans }}
{% endblock %}

{% block page_title %}
    {{ 'Planner'|trans }}
{% endblock %}



{% block body %}

    <div class="container-fluid">
        <div class="app-calendar overflow-hidden border">
            <div class="row no-gutters">
                <!-- Sidebar -->
                <div class="col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column"
                     id="app-calendar-sidebar">
                    <div class="">

                        <div class="d-flex justify-content-center" id="nav-calendar">
                            <label for="quickDateSelect" class="form-label d-none"></label>
                            <input type="text" class="form-control col-12 d-none " name="quickDateSelect" id="quickDateSelect">
                        </div>
                        <div class="card-body pb-0">
                            <h5 class="section-label mb-1">
                                <span class="align-middle">{{ 'Filters'|trans }}</span>
                            </h5>

                            <form id="filter_form" name="form-filter-users w-100">
                                <div class="calendar-events-filter">

                                    {% if userPermission.can('assign_tasks','users') %}
                                        <div class="mb-1">
                                            <label for="filterUser">{{ configuration.user_nomenclature|trans }}</label>
                                            <select type="text" class="form-control select2" id="filterUser" name="{{ filterService.filterField('user') }}">
                                                <option value="">{{ 'All'|trans }}</option>
                                                {% for user in users %}
                                                    <option value="{{ user.id }}" {% if user.id == filterService.getFilterValue("user") %}selected="selected"{% endif %}>{{ user.fullName }} {% if user.id == app.user.id %} ({{'You'|trans}}){% endif %}</option>
                                                {% endfor %}
                                            </select>
                                        </div>
                                    {% else %}
                                        <input type="hidden" name="user" value="{{ app.user.id }}">
                                    {% endif %}


                                    <div class="mb-1">
                                        <label  for="status">{{ 'Status'|trans }}</label>
                                        <select id="filterStatus" class="select2 form-control" name="{{ filterService.filterField('status') }}">
                                            <option value="" selected="selected" >{{ 'All'|trans }}</option>
                                            {% for status in taskStatuses %}
                                                <option value="{{status.id}}" {% if status.id == filterService.getFilterValue("status") %}selected="selected"{% endif %}>{{status.name|trans}}</option>
                                            {% endfor %}
                                        </select>
                                    </div>

                                    {#
                                    <div class="mb-1">
                                        <button class="btn btn-outline-grey" onclick="resetFilters()">Reestablecer filtros</button>
                                    </div>
                                    #}
                                    <input id="date_from" form="filter_form" type="hidden" value="{{filterService.getFilterValue("date_from")}}" class="date_range" name="{{ filterService.filterField('date_from') }}">
                                    <input id="date_to" form="filter_form" type="hidden" value="{{filterService.getFilterValue("date_to")}}" class="date_range" name="{{ filterService.filterField('date_to') }}">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- /Sidebar -->
                <!-- Calendar -->
                <div class="col position-relative">
                    <div class="card shadow-none border-0 mb-0 rounded-0">
                        <div class="card-body pb-0">
                            <div id="calendar"></div>
                        </div>
                    </div>
                </div>
                <!-- /Calendar -->
                <div class="body-content-overlay"></div>
            </div>
        </div>
    </div>
    <!-- Full calendar end -->

{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" type="text/css"
          href="{{ asset('assets/css/vendors/calendar/fullcalendar2.min.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/css/vendors/calendar/app-calendar.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/css/vendors/jquery.contextMenu.min.css') }}">
    <style>
        .fc-more-popover {
            max-height: 65%;
            overflow-y: auto;
        }
    </style>
{% endblock %}

{% block javascripts %}

    <script src="{{ asset('assets/js/calendar/fullcalendar2.min.js') }}"></script>
    <script src="{{ asset('assets/js/moment.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery.contextMenu.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery-ui/jquery.ui.position.min.js') }}"></script>
    <script src="{{ asset('assets/js/lockr/lockr.js') }}"></script>
    <script>
        let calendar = null;

        const filterForm = document.getElementById('filter_form');

        let calendarEl = document.getElementById('calendar');

        const EVENT_CALENDAR_KEY_DATES = "planner_task_dates";
        const EVENT_CALENDAR_VIEW = "planner_task_view";

        const getCalendarSavedDates = () => {
            let selectedDates = Lockr.get(EVENT_CALENDAR_KEY_DATES);
            if(typeof selectedDates !== "undefined") {
                return selectedDates;
            } else {
                Lockr.set(EVENT_CALENDAR_KEY_DATES, {
                    dateFrom: moment().clone().startOf('month').format('DD-MM-YYYY'),
                    dateTo: moment().clone().endOf('month').format('DD-MM-YYYY'),
                });
                return Lockr.get(EVENT_CALENDAR_KEY_DATES);
            }
        }

        function focusSpecificDate(date){
            calendar.gotoDate(date);
        }

        flatpickr('#quickDateSelect', {
            locale: locale,
            dateFormat: "d-m-Y",
            inline: true,
            onChange: function(dateStr) {
                focusSpecificDate(dateStr[0]);
            }
        });

        const setCalendarSavedDates = (dateFrom, dateTo) => {
            $('#date_from').val(dateFrom);
            $('#date_to').val(dateTo);
            Lockr.set(EVENT_CALENDAR_KEY_DATES, {
                dateFrom,
                dateTo
            });
        }

        const setCalendarView = (view) => {
            Lockr.set(EVENT_CALENDAR_VIEW, view);
        }

        const getCalendarView = () => {
            let calendarView = Lockr.get(EVENT_CALENDAR_VIEW);
            if(typeof  calendarView !== 'undefined')
                return calendarView;
            else
                return 'dayGridMonth';
        }


        const getEventsFromFilter = (info, successCallback, failureCallback) => {
            if(typeof info !== "undefined") {
                setCalendarSavedDates(
                    moment(info.start).format('DD-MM-YYYY'),
                    moment(info.end).format('DD-MM-YYYY')
                );
            }
            let formData = $(filterForm).serialize();
            getEvents(formData).then(tasks => {
                if(typeof successCallback !== "undefined") {
                    console.log(tasks);
                    successCallback(tasks);
                }
            });
        }

        const getEvents = (formData) => {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '{{ path('task_get_json') }}',
                    type: 'get',
                    data: formData,
                    success: (response) => {
                        if(response.success) {
                            resolve(response.data);
                        } else {

                        }
                    },
                    error: (err) => {

                    }
                });
            });
        }

        const detectCalendarChangedDate = () => {

            let date = calendar.getDate();
            let dateFrom = moment(date).clone().startOf('month').format('DD-MM-YYYY');
            let dateTo = moment(date).clone().endOf('month').format('DD-MM-YYYY');
            setCalendarSavedDates(dateFrom, dateTo);
        }

        $(function () {

            $('.select2').select2();
            $('.select2').on('change.select2', function () {
                calendar.refetchEvents()
            });
            $('#resetFilters').on('click', function () {
                window.location.href = "{{ path('task_planner') }}";
            })
            $('.type-filter').change(function () {
                calendar.refetchEvents()
            });

        });

        $(document).on('click', '.fc-sidebarToggle-button', function (e) {
            $('.app-calendar-sidebar, .body-content-overlay').addClass('show');

        });

        $(document).on('click', '.body-content-overlay', function (e) {
            $('.app-calendar-sidebar, .body-content-overlay').removeClass('show');
        });


        document.addEventListener('DOMContentLoaded', function () {
            let calendarEl = document.getElementById('calendar'),
                toggleSidebarBtn = $('.btn-toggle-sidebar')
            ;

            // Event click function
            function eventClick(info) {
                let eventToUpdate = info.event;

                showTask(eventToUpdate.id);

            }

            // Modify sidebar toggler
            function modifyToggler() {
                $('.fc-sidebarToggle-button')
                    .empty()
                    .append(feather.icons['filter'].toSvg({class: 'ficon'}));
            }

            // Calendar plugins
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: getCalendarView(),
                schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
                buttonText: {
                    'day': '{{ 'Day'|trans }}',
                    'month': '{{ 'Month'|trans }}',
                    'list': '{{ 'Listing'|trans }}',
                    'week': '{{ 'Week'|trans }}'
                },
                editable: false,
                locale: locale,
                timeZone: 'local',
                slotDuration: '{% if app.user.calendarInterval %}{{ app.user.calendarInterval|date('H:i:s') }}{% elseif configuration.calendar_interval %}{{ configuration.calendar_interval|date('H:i:s') }}{% else %}00:15:00{% endif %}',
                firstDay: 1,
                eventResizableFromStart: true,
                eventColor: 'red',
                customButtons: {
                    sidebarToggle: {
                        text: 'Sidebar'
                    }
                },
                headerToolbar: {
                    start: 'sidebarToggle, prev,next, title',
                    end: 'dayGridMonth,timeGridWeek,{{ app.user.isAdmin() ? 'resourceTimeGridDay' : 'timeGridDay' }},listMonth'
                },
                initialDate: moment(getCalendarSavedDates().dateFrom, 'DD-MM-YYYY').format('YYYY-MM-DD'),
                eventTimeFormat: { // like '14:30:00'
                    hour: '2-digit',
                    minute: '2-digit'
                },
                {% if app.user.isAdmin %}
                resources: [
                    {% for user in users %}
                    {title: '{{ user.getFullName() }}', id: '{{ user.getId() }}'},
                    {% endfor %}
                ],
                {% endif %}
                views: {
                    dayGridMonth: {
                        dayMaxEventRows: 5,
                        moreLinkContent: function (object) {
                            const {num} = object;
                            return num+" {{ 'Tasks More'|trans }}";
                        }
                    }
                },
                navLinks: true, // can click day/week names to navigate views
                events: [
                    {
                        "id": "1ee53953-f3b3-6590-868e-a75bf6edad9c",
                        "title": "Tarea Unificación (Pendiente)",
                        "start": "2023-09-01 07:00:00",
                        "end": null,
                        "allDay": false,
                        "display": "block",
                        "resourceId": "1ee53923-c640-65ca-ae02-b992e49ab0d2",
                        "extendedProps": {
                            "id": "1ee53953-f3b3-6590-868e-a75bf6edad9c",
                            "user": "1ee53923-c640-65ca-ae02-b992e49ab0d2",
                            "status": 4,
                            "statusName": "Pendiente",
                            "backgroundColor": "#ff9f43",
                            "timestamp": "Nada, ",
                            "title": "Tarea Unificación",
                            "description": "<p>Nueva tarea andalucia open future</p>",
                            "appointmentId": null,
                            "clientId": null,
                            "appointmentDate": null,
                            "clientFullName": null
                        },
                        "backgroundColor": "#ff9f43",
                        "borderColor": "#043C5C"
                    },{
                        "id": "1ee53953-f3b3-6590-868e-a75bf6edad9c",
                        "title": "Tarea Unificación (Pendiente)",
                        "start": "2023-09-01T07:00:00",
                        "end": null,
                        "allDay": false,
                        "resourceId": "1ee53923-c640-65ca-ae02-b992e49ab0d2",
                        "extendedProps": {
                            "id": "1ee53953-f3b3-6590-868e-a75bf6edad9c",
                            "user": "1ee53923-c640-65ca-ae02-b992e49ab0d2",
                            "status": 4,
                            "statusName": "Pendiente",
                            "timestamp": "Nada, ",
                            "title": "Tarea Unificación",
                            "description": "<p>Nueva tarea andalucia open future</p>",
                            "appointmentId": null,
                            "clientId": null,
                            "appointmentDate": null,
                            "clientFullName": null
                        },
                        "backgroundColor": "#ff9f43",
                        "borderColor": "#043C5C"
                    }
                ],
                eventDidMount: function(event) { //Run when events are rendered
                    //info.el.attr = info.el.className + " context-menu-one"
                    event.el.style.borderColor = event.borderColor;
                    event.el.setAttribute('data-id', event.event._def.extendedProps.id);
                    event.el.style.borderColor = event.event._def.extendedProps.borderColor;
                    event.el.style.backgroundColor = event.event._def.extendedProps.backgroundColor;
                },
                eventClassNames: function ({event: calendarEvent}) {
                    return [
                        'eventCalendar',
                        'cursor-pointer'
                    ]
                },
                eventClick: function (info) {
                    eventClick(info);

                },
                dateClick: function(info) {
                    let date = moment(info.dateStr);
                    $('#taskDateModal').val(date.format('YYYY-MM-DD'));
                    $('#professionalsModal option').remove().trigger('change');
                    $('#servicesModal').val(null).trigger('change');

                    $('#redirectToCreateModal').modal(true);
                    {#
                    //window.location.href = "{{ path('task_new') }}?referer={{ app.request.getUri() }}&task_date="+date.format('DD-MM-YYYY');
                    #}
                },
                datesSet: function () {
                    modifyToggler();
                },
                viewClassNames: function (e) {
                    setCalendarView(e.view.type);
                },
                viewDidMount: (view) => {
                    modifyToggler();
                    detectCalendarChangedDate();
                    getEventsFromFilter();
                    // Cuando se pulsa en el botón de anterior,
                    $('.fc-prev-button').off('click');
                    $('.fc-prev-button').click(function(){
                        detectCalendarChangedDate();
                        getEventsFromFilter();
                    });

                    $('.fc-next-button').off('click');
                    $('.fc-next-button').click(function(){
                        detectCalendarChangedDate();
                        getEventsFromFilter();
                    });
                    /*
                    $('.fc-next-button').click(function(){
                        let date = calendar.getDate();
                        let dateFrom = moment(date).clone().startOf('month').format('YYYY-MM-DD HH:mm:ss');
                        let dateTo = moment(date).clone().endOf('month').format('YYYY-MM-DD HH:mm:ss');
                        setCalendarSavedDates(dateFrom, dateTo);
                        console.log("llega")
                        return false;
                    });
                    */

                },
            });

            // Render calendar
            calendar.render();
            // Modify sidebar toggler
            modifyToggler();

            // Sidebar Toggle Btn
            if (toggleSidebarBtn.length) {
                toggleSidebarBtn.on('click', function () {
                    //cancelBtn.removeClass('d-none');
                });
            }

        });

        $(function() {
            $.contextMenu({
                selector: '.fc-event',
                callback: function(key, options) {

                    let taskId = this[0].getAttribute('data-id');

                    if(key == 'edit'){
                        openEditTaskModal(taskId);

                    }else if(key == 'change_status'){
                        changeStatusTask(taskId);


                    }else if(key == 'add_time'){
                        addTimeToTask(taskId);


                    }else if(key == 'delete'){

                        confirmDeleteTask(taskId);

                    }
                    return true;

                },
                items: {
                    "change_status": {
                        name: "{{ 'Change Status'|trans }}",
                        icon: function(opt, $itemElement, itemKey, item){
                            // Set the content to the menu trigger selector and add an bootstrap icon to the item.
                            $itemElement.html("<i data-feather='activity'></i> {{ 'Change Status'|trans }}" );

                            if (feather) {
                                feather.replace({
                                    width: 14,
                                    height: 14
                                });
                            }
                            // Add the context-menu-icon-updated class to the item
                            return 'context-menu-icon-updated';
                        }
                    },
                    "add_time": {
                        name: "{{ 'Add Time'|trans }}",
                        icon: function(opt, $itemElement, itemKey, item){
                            // Set the content to the menu trigger selector and add an bootstrap icon to the item.
                            $itemElement.html("<i data-feather='watch'></i> {{ 'Add Time'|trans }}" );

                            if (feather) {
                                feather.replace({
                                    width: 14,
                                    height: 14
                                });
                            }
                            // Add the context-menu-icon-updated class to the item
                            return 'context-menu-icon-updated';
                        }
                    },
                    "edit": {
                        name: "{{ 'Edit'|trans }}",
                        icon: function(opt, $itemElement, itemKey, item){
                            // Set the content to the menu trigger selector and add an bootstrap icon to the item.
                            $itemElement.html("<i data-feather='edit'></i> {{ 'Edit'|trans }}" );

                            if (feather) {
                                feather.replace({
                                    width: 14,
                                    height: 14
                                });
                            }
                            // Add the context-menu-icon-updated class to the item
                            return 'context-menu-icon-updated';
                        }
                    },

                    "delete": {
                        name: "{{ 'Delete'|trans }}",
                        icon: function(opt, $itemElement, itemKey, item){
                            // Set the content to the menu trigger selector and add an bootstrap icon to the item.
                            $itemElement.html("<i data-feather='delete'></i> {{ 'Delete'|trans }}");

                            if (feather) {
                                feather.replace({
                                    width: 14,
                                    height: 14
                                });
                            }
                            // Add the context-menu-icon-updated class to the item
                            return 'context-menu-icon-updated';
                        }
                    },

                }
            });

        });

    </script>
{% endblock %}

{% block action_buttons %}

    <li class="level-menu outside">
        <a class="nav-link" href="#" onclick="openCreateTaskModal(null, null, null, null)">
            <i class="ficon" data-feather="plus-circle"></i>
        </a>
    </li>

{% endblock %}