security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:

        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 4 # Lowest possible value for bcrypt
            time_cost: 3 # Lowest possible value for argon
            memory_cost: 10 # Lowest possible value for argon
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
        app_client_provider:
            entity:
                class: App\Entity\Client\Client
                property: dni
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        public:
            pattern: ^/public
            security: false
        client:
            pattern: ^/clientUser
            provider: app_client_provider
            stateless: true
            jwt: ~
            entry_point: App\Security\LoginClientFormAuthenticator
            custom_authenticator: App\Security\LoginClientFormAuthenticator
            logout:
                path: app_logout_client
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/public, roles: PUBLIC_ACCESS}
        - { path: ^/change-locale, roles: PUBLIC_ACCESS}
        - { path: ^/documents, roles: PUBLIC_ACCESS}
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/clientUser/login, roles: PUBLIC_ACCESS }
        - { path: ^/clientUser, roles: ROLE_CLIENT }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/public/change-password, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
